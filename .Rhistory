theme_light()
knitr::opts_chunk$set(echo = TRUE)
library(DBI)
library(RSQLite)
library(tidyverse)
library(lubridate)
# The survey database for Part One
survey <- dbConnect(SQLite(), dbname = "survey.db")
# The drinks database for Part Two
drinks <- dbConnect(SQLite(), dbname = "drinks.db")
# Load the data in R
drink_date <- dbReadTable(drinks, "temp")
# Calculate the interval between two visits
drink_date <- drink_date %>%
mutate(date = ymd(date)) %>%
arrange(person, date) %>%
group_by(person) %>%
mutate(interval = date - lag(date))
# Compute the average interval lenght between two bar visits
mean(drink_date$interval, na.rm = TRUE)
# Plot a histogram
ggplot(drink_date, aes(x=interval)) +
geom_histogram(binwidth = 1, colour = "black")
dbDisconnect(survey)
dbDisconnect(drinks)
knitr::opts_chunk$set(echo = TRUE)
library(DBI)
library(RSQLite)
library(tidyverse)
library(lubridate)
# The survey database for Part One
survey <- dbConnect(SQLite(), dbname = "survey.db")
# The drinks database for Part Two
drinks <- dbConnect(SQLite(), dbname = "drinks.db")
# Load the data in R
drink_date <- dbReadTable(drinks, "temp")
# Load the data in R
drink_date <- dbReadTable(drinks, "temp")
# Calculate the interval between two visits
drink_date <- drink_date %>%
mutate(date = ymd(date)) %>%
arrange(person, date) %>%
group_by(person) %>%
mutate(interval = date - lag(date))
# Compute the average interval lenght between two bar visits
mean(drink_date$interval, na.rm = TRUE)
# Plot a histogram
ggplot(drink_date, aes(x=interval)) +
geom_histogram(binwidth = 1, colour = "black")
View(drink_date)
# Load the data in R
drink_date <- dbReadTable(drinks, "temp")
drink_date <- drink_date %>%
mutate(date = ymd(date)) %>%
arrange(person, date) %>%
group_by(person, date) %>%
summarise(strong_stuff = sum(type %in% c("vodka", "wisky", "rum")))
View(drink_date)
# Load the data in R
drink_date <- dbReadTable(drinks, "temp")
# Calculate the interval between two visits
drink_date <- drink_date %>%
mutate(date = ymd(date)) %>%
arrange(person, date) %>%
group_by(person, date) %>%
summarise(strong_stuff = sum(type %in% c("vodka", "wisky", "rum"))) %>%
group_by(person) %>%
mutate(interval = date - lag(date))
# Compute the average interval lenght between two bar visits
mean(drink_date$interval, na.rm = TRUE)
# Plot a histogram
ggplot(drink_date, aes(x=interval)) +
geom_histogram(binwidth = 1, colour = "black")
View(drink_date)
# Plot a histogram
ggplot(drink_date, aes(x=interval, color=strong_stuff)) +
geom_density(binwidth = 1, colour = "black")
# Plot a histogram
ggplot(drink_date, aes(x=interval, group=as.factor(strong_stuff)) +
# Plot a histogram
ggplot(drink_date, aes(x=interval, group=as.factor(strong_stuff))) +
geom_density(binwidth = 1, colour = "black")
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=as.factor(strong_stuff))) + geom_density(binwidth = 1, colour = "black")
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=as.factor(strong_stuff))) + geom_density()
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=as.factor(lag(strong_stuff))) + geom_density()
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=as.factor(lag(strong_stuff)))) + geom_density()
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=as.factor(lag(strong_stuff)))) + geom_density()
View(drink_date)
# Calculate the interval between two visits
drink_date <- drink_date %>%
mutate(date = ymd(date)) %>%
arrange(person, date) %>%
group_by(person, date) %>%
summarise(strong_stuff = sum(type %in% c("vodka", "wisky", "rum"))) %>%
group_by(person) %>%
mutate(interval = date - lag(date),
strong_stuff = lag(strong_stuff))
# Load the data in R
drink_date <- dbReadTable(drinks, "temp")
# Calculate the interval between two visits
drink_date <- drink_date %>%
mutate(date = ymd(date)) %>%
arrange(person, date) %>%
group_by(person, date) %>%
summarise(strong_stuff = sum(type %in% c("vodka", "wisky", "rum"))) %>%
group_by(person) %>%
mutate(interval = date - lag(date),
strong_stuff = lag(strong_stuff))
# Compute the average interval lenght between two bar visits
mean(drink_date$interval, na.rm = TRUE)
# Plot a histogram
ggplot(drink_date, aes(x=interval)) +
geom_histogram(binwidth = 1, colour = "black")
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=as.factor(lag(strong_stuff)))) + geom_density()
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=as.factor(strong_stuff))) + geom_density()
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) + geom_density()
# Calculate the interval between two visits
drink_date <- drink_date %>%
mutate(date = ymd(date)) %>%
arrange(person, date) %>%
group_by(person, date) %>%
summarise(strong_stuff = sum(type %in% c("vodka", "wisky", "rum"))) %>%
group_by(person) %>%
mutate(interval = date - lag(date),
strong_stuff = as.factor(lag(strong_stuff)))
# Load the data in R
drink_date <- dbReadTable(drinks, "temp")
# Calculate the interval between two visits
drink_date <- drink_date %>%
mutate(date = ymd(date)) %>%
arrange(person, date) %>%
group_by(person, date) %>%
summarise(strong_stuff = sum(type %in% c("vodka", "wisky", "rum"))) %>%
group_by(person) %>%
mutate(interval = date - lag(date),
strong_stuff = as.factor(lag(strong_stuff)))
# Compute the average interval lenght between two bar visits
mean(drink_date$interval, na.rm = TRUE)
# Plot a histogram
ggplot(drink_date, aes(x=interval)) +
geom_histogram(binwidth = 1, colour = "black")
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) + geom_density()
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) +
geom_density() +
scale_colour_manual(labels = c("nope", "yep"),
values = c("dodgerblue2", "firebrick2"))
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) +
geom_density() +
scale_colour_manual("Had strong stuff \n on their last visit",
labels = c("nope", "yep"),
values = c("dodgerblue2", "firebrick2"))
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) +
geom_density() +
scale_colour_manual("Had strong \nstuff on their \nlast visit",
labels = c("nope", "yep"),
values = c("dodgerblue2", "firebrick2"))
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) +
geom_density() +
scale_colour_manual("Had strong stuff \non their last visit",
labels = c("nope", "yep"),
values = c("dodgerblue2", "firebrick2"))
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) +
geom_density() +
scale_colour_manual("Had strong stuff \non their last visit",
labels = c("nope", "yep"),
values = c("dodgerblue2", "firebrick2")) +
thene_light()
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) +
geom_density() +
scale_colour_manual("Had strong stuff \non their last visit",
labels = c("nope", "yep"),
values = c("dodgerblue2", "firebrick2")) +
theme_light()
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) +
geom_density() +
xlab("time interval since their last visit") +
scale_colour_manual("Had strong stuff \non their last visit",
labels = c("nope", "yep"),
values = c("dodgerblue2", "firebrick2")) +
theme_light()
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) +
geom_density() +
xlab("time interval since their last visit") +
scale_colour_manual("Had strong stuff \non their last visit (days)",
labels = c("nope", "yep"),
values = c("dodgerblue2", "firebrick2")) +
theme_light()
# Plot a histogram
ggplot(drink_date, aes(x=interval, colour=strong_stuff)) +
geom_density() +
xlab("time interval since their last visit (days)") +
scale_colour_manual("Had strong stuff \non their last visit",
labels = c("nope", "yep"),
values = c("dodgerblue2", "firebrick2")) +
theme_light()
ks.test(drink_date$interval[drink_date$strong_stuff == 0],
drink_date$interval[drink_date$strong_stuff == 1])
drink_date$interval[drink_date$strong_stuff == 0]
drink_date$interval[drink_date$strong_stuff == 1]
typeof(drink_date$interval[drink_date$strong_stuff == 1])
ks.test(drink_date$interval[drink_date$strong_stuff == 0],
drink_date$interval[drink_date$strong_stuff == 1])
distr0 <- drink_date$interval[drink_date$strong_stuff == 0]
distr1 <- drink_date$interval[drink_date$strong_stuff == 1]
ks.test(distr0, distr1)
ks.test(distr1, distr0)
distr0 <- drink_date$interval[drink_date$strong_stuff == 0]
distr1 <- drink_date$interval[drink_date$strong_stuff == 1]
ks.test(distr1, distr0)
distr0 <- distr0[!is.na(distr0)]
distr0
distr1 <- distr1[!is.na(distr1)]
ks.test(distr1, distr0)
ks.test(distr0, as.numeric(distr1))
distr0 <- drink_date$interval[drink_date$strong_stuff == 0]
distr1 <- drink_date$interval[drink_date$strong_stuff == 1]
ks.test(as.numeric(distr0), as.numeric(distr1))
dbDisconnect(survey)
dbDisconnect(drinks)
?rpart
??rpart
install.packages("rpart")
library(rpart)
# library
library(tidyverse)
library(rpart)
# read in data
data <- read_csv("data/mushrooms.csv")
setwd("Documents/UBC - MDS/block3_522_Worflows/mushrooms")
setwd("UBC - MDS/block3_522_Worflows/mushrooms")
# read in data
data <- read_csv("data/mushrooms.csv")
setwd('C:/Users/Maud/Documents/UBC - MDS/block3_522_Workflows/mushrooms')
# read in data
data <- read_csv("data/mushrooms.csv")
data <- data %>%
mutate(class        = factor(class),
cap_shape    = factor(cap_shape),
cap_color    = factor(cap_color),
odor         = factor(odor),
gill_spacing = factor(gill_spacing),
gill_size    = factor(gill_size),
gill_color   = factor(gill_color),
stalk_color  = factor(stalk_color),
spore_color  = factor(spore_color))
# read in data
data <- read_csv("results/clean_mushrooms.csv")
data <- data %>%
mutate(class        = factor(class),
cap_shape    = factor(cap_shape),
cap_color    = factor(cap_color),
odor         = factor(odor),
gill_spacing = factor(gill_spacing),
gill_size    = factor(gill_size),
gill_color   = factor(gill_color),
stalk_color  = factor(stalk_color),
spore_color  = factor(spore_color))
tree <- rpart(class ~ cap_shape + cap_color + odor + gill_spacing +
gill_size + gill_color + stalk_color + spore_color,
data = data, method = "class")
# plot tree
plot(tree, uniform=TRUE,
main="Classification Tree for Kyphosis")
plot(tree, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(tree, use.n=TRUE, all=TRUE, cex=.8)
install.packages("party")
library(party)
# build tree
tree <- ctree(class ~ cap_shape + cap_color + odor + gill_spacing +
gill_size + gill_color + stalk_color + spore_color,
data = data)
# plot tree
plot(tree)
# build tree
tree <- ctree(class ~ cap_shape + cap_color + odor + gill_spacing +
gill_size + gill_color + stalk_color + spore_color,
data = data,
controls = ctree_control(maxsurrogate = 3))
# build tree
tree <- ctree(class ~ cap_shape + cap_color + odor + gill_spacing +
gill_size + gill_color + stalk_color + spore_color,
data = data,
controls = ctree_control(maxdepth = 3))
# plot tree
plot(tree)
# build tree
tree <- ctree(class ~ cap_shape + cap_color + odor + gill_spacing +
gill_size + gill_color + stalk_color + spore_color,
data = data,
controls = ctree_control(maxdepth = 4))
# plot tree
plot(tree)
# build tree
tree <- ctree(class ~ cap_shape + cap_color + odor + gill_spacing +
gill_size + gill_color + stalk_color + spore_color,
data = data,
controls = ctree_control(maxdepth = 3))
install.packages('rattle')
> install.packages('rpart.plot')
> install.packages('RColorBrewer')
# library
library(tidyverse)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# read in data
data <- read_csv("results/clean_mushrooms.csv")
data <- data %>%
mutate(class        = factor(class),
cap_shape    = factor(cap_shape),
cap_color    = factor(cap_color),
odor         = factor(odor),
gill_spacing = factor(gill_spacing),
gill_size    = factor(gill_size),
gill_color   = factor(gill_color),
stalk_color  = factor(stalk_color),
spore_color  = factor(spore_color))
# build tree
tree <- rpart(class ~ cap_shape + cap_color + odor + gill_spacing +
gill_size + gill_color + stalk_color + spore_color,
data = data,
method = "class")
# plot tree
fancyRpartPlot(tree)
# save prediction
y_pred <- predict(tree, test, type = "class")
n <- length(data)
# read in data
data <- read_csv("results/clean_mushrooms.csv")
n <- length(data$class)
n_row <- length(data$class)
u <- runif(n_row)
train <- data[u>prop,]
prop = 0.2
train <- data[u>prop,]
test <- data[u <= pro,]
test <- data[u <= prop,]
split_data <- function(data, prop = 0.2) {
## Split a data frame into training and test sets.
##
## Parameter:
##    data: a data frame
##    prop: the test set proportion, default is 20%
##
## Returns:
##    train: a data frame containing the training samples
##    test: a data frame containing the test samples
n_row <- length(data$class)
u <- runif(n_row)
train <- data[u > prop,]
test <- data[u <= prop,]
return(train, test)
}
# read in data
data <- read_csv("results/clean_mushrooms.csv")
data <- data %>%
mutate(class        = factor(class),
cap_shape    = factor(cap_shape),
cap_color    = factor(cap_color),
odor         = factor(odor),
gill_spacing = factor(gill_spacing),
gill_size    = factor(gill_size),
gill_color   = factor(gill_color),
stalk_color  = factor(stalk_color),
spore_color  = factor(spore_color))
# split the data
train, test <- split_data(data)
# split the data
(train, test) <- split_data(data)
# split the data
res <- split_data(data)
return(res)
split_data <- function(data, prop = 0.2) {
## Split a data frame into training and test sets.
##
## Parameter:
##    data: a data frame
##    prop: the test set proportion, default is 20%
##
## Returns:
##    train: a data frame containing the training samples
##    test: a data frame containing the test samples
n_row <- length(data$class)
u <- runif(n_row)
train <- data[u > prop,]
test <- data[u <= prop,]
res <- (train, test)
return(res)
}
split_data <- function(data, prop = 0.2) {
## Split a data frame into training and test sets.
##
## Parameter:
##    data: a data frame
##    prop: the test set proportion, default is 20%
##
## Returns:
##    train: a data frame containing the training samples
##    test: a data frame containing the test samples
n_row <- length(data$class)
u <- runif(n_row)
train <- data[u > prop,]
test <- data[u <= prop,]
res <- (train, test)
return(res)
}
res <- (train, test)
res <- list(train, test)
split_data <- function(data, prop = 0.2) {
## Split a data frame into training and test sets.
##
## Parameter:
##    data: a data frame
##    prop: the test set proportion, default is 20%
##
## Returns:
##    train: a data frame containing the training samples
##    test: a data frame containing the test samples
n_row <- length(data$class)
u <- runif(n_row)
train <- data[u > prop,]
test <- data[u <= prop,]
res <- list(train, test)
return(res)
}
# split the data
res <- split_data(data)
train <- res[[1]]
test <- res[[2]]
# build tree
tree <- rpart(class ~ cap_shape + cap_color + odor + gill_spacing +
gill_size + gill_color + stalk_color + spore_color,
data = train,
method = "class")
# plot tree
fancyRpartPlot(tree)
ggsave("results/tree.png")
# plot tree
p <- fancyRpartPlot(tree)
png(out_tree)
p <- fancyRpartPlot(tree)
dev.off()
png(out_tree)
fancyRpartPlot(tree)
dev.off()
png(tf <- tempfile(fileext = out_tree))
fancyRpartPlot(tree)
dev.off()
cat(tf)
# plot tree
png(tf <- tempfile(fileext = out_tree))
# plot tree
png(tf <- tempfile(fileext = "results/tree.png"))
fancyRpartPlot(tree)
dev.off()
cat(tf)
dir()
png("results/tree.png")
fancyRpartPlot(tree)
dev.off()
png("results/tree.png")
fancyRpartPlot(tree)
dev.off()
png("results/tree.png")
fancyRpartPlot(tree)
dev.off()
# save prediction
y_pred <- predict(tree, test, type = "class")
write.csv(data.frame('label' = test$class, 'pred' = y_pred),
file = "results/predictions")
sum(y_pred[test$class == 1] == 1)
pred_rate <- data.frame('real\\predict' = c('poisonous', 'edible'),
'poisonous' = c(sum(y_pred[test$class == 1] == 1), sum(y_pred[test$class == 1] == 0)),
'edible' = c(sum(y_pred[test$class == 0] == 1), sum(y_pred[test$class == 0] == 0)))
View(pred_rate)
pred_rate <- data.frame('' = c('pred.poisonous', 'pred.edible'),
'real.poisonous' = c(sum(y_pred[test$class == 1] == 1), sum(y_pred[test$class == 1] == 0)),
'real.edible' = c(sum(y_pred[test$class == 0] == 1), sum(y_pred[test$class == 0] == 0)))
pred_rate <- data.frame('' = c('pred.poisonous', 'pred.edible'),
'real.poisonous' = c(sum(y_pred[test$class == 1] == 1), sum(y_pred[test$class == 1] == 0)),
'real.edible' = c(sum(y_pred[test$class == 0] == 1), sum(y_pred[test$class == 0] == 0)))
pred_rate <- data.frame('count' = c('pred.poisonous', 'pred.edible'),
'real.poisonous' = c(sum(y_pred[test$class == 1] == 1), sum(y_pred[test$class == 1] == 0)),
'real.edible' = c(sum(y_pred[test$class == 0] == 1), sum(y_pred[test$class == 0] == 0)))
write.csv(pred_rate, file = "results/predictions")
View(pred_rate)
knitr::opts_chunk$set(echo = FALSE)
library(readr)
(predictions <- read_csv("../results/predictions.csv"))
library(readr)
(predictions <- read_csv("../results/predictions.csv"))
library(readr)
(predictions <- read_csv("../results/predictions.csv"))
